function [Y,Xf,Af] = testLinkerClassifierANN(X,~,~)
%TESTLINKERCLASSIFIERANN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Aug-2014 16:17:22.
% 
% [Y] = testLinkerClassifierANN(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 116xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_remove = [2 12 13 14 15 16 21 22 23 24 30 31 32 33 38 43 48 53 58 73 78 83 88 100];
  x1_step1_keep = [1 3 4 5 6 7 8 9 10 11 17 18 19 20 25 26 27 28 29 34 35 36 37 39 40 41 42 44 45 46 47 49 50 51 52 54 55 56 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72 74 75 76 77 79 80 81 82 84 85 86 87 89 90 91 92 93 94 95 96 97 98 99 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116];
  x1_step2_xoffset = [0;0;0;0;0;0;0;0;0;0;0.00103445281274617;6.48368804831989e-05;0;0;0;0.000408299034461379;0;0;0;0;0;0.000193199128261767;0;0;0;0;0;0;0;0.00033716406323947;0;0;0;0;0;0;0;0;0;0;0;0.000231557904044166;0;0;0;0;0;0;0;0;0;0.000505969510413706;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.000100116085377522;0;0;0;0;0;0;0;0;1;0;0;0;0;0;46;46;-2.64973735809326;0;0;-13.875;-9.77777767181396;-8.64297676086426;-8.33333301544189;0];
  x1_step2_gain = [0.0153846153846154;2.90652540942163;2.130595559003;2.47654526899516;2.60364328451184;3.69053369507152;6.18122410572679;11.9988464034051;29.1400559232802;169.764545888833;2.73970610003535;3.8838048615904;3.66097059968815;51.6236376183915;2.70780829570945;3.23468126612123;2.36442397379761;29.6573029803752;116.034473334562;13.8082107673563;6.90410538367816;5.70890441818334;5.53909706319712;15.7797336681048;7.71362440392536;5.34373974790435;9.74679458504182;12.4365055700217;7.93977359135254;5.95239441574191;7.71362440392536;10.4642249520557;6.49999975785614;5.34373974790435;10.2848321445142;14.7648223857065;6.24499828680726;5.03051899853272;6.65732687383463;16.0312192437131;6.90410538367816;6.01414784916472;4.58257560677817;43.3589677406016;13.8082107673563;7.45117477070123;6.45323765981313;4.87339729252091;43.3589677406016;12.7714955034954;7.46190306544748;5.84911393612596;9.1241440276837;10.8397419351504;7.29931482518003;6.81175486605657;9.91071258210701;12.4365055700217;6.65732687383463;5.25873755877293;6.19677356028073;12.3648250792599;6.76461366759349;6.61372874068078;8.98610056622363;12.1655253702449;6.21825278501086;5.99253077733537;5.07092570178462;2;2;2;2;2;2;2;0.0714285714285714;0.0123456790123457;0.0129032258064516;7.62078951379363e-05;8.32466181061394e-05;0.00960628536249304;0.0111111111111111;0.0112359550561798;0.313409627180165;2;2;0.101766785001003;0.109422493035583;0.108789841456394;0.138514834940196;13.6886648042887];
  x1_step2_ymin = -1;
  
  % Layer 1
  b1 = [-0.0038595847225839138156;-0.0098710643638208785122];
  IW1_1 = [0.025332780649050437582 -0.025997062426310262734 0.053581180422878869896 0.055389848415404646653 0.010603151044623367397 -0.041698034133253895905 -0.043284555211258540774 -0.02822056028085531687 -0.017853071243147951297 -0.020138570379974799623 0.082215294257887150398 0.029699856676330713828 -0.005646037789391086803 -0.032981894151889387667 0.017847350945248183218 -0.051003511321348664331 -0.026346728677059894075 -0.048270359288082945182 -0.002247250617990659196 0.037492202858047524172 0.041698841014843689157 -0.0017377909602673360413 0.039419537369846900654 0.0085488063257448346915 0.023632995383376792509 0.020212320026525069233 -0.007279324592475415294 -0.023165703363972230122 0.033577519190239803193 -0.019083700826283963442 0.028416135833082084572 -0.02468828750436484129 0.0032570629760887001222 -0.0017568141602069967458 0.0075166960934436102826 -0.04484206851018199963 -0.00011545025774054181421 0.023676999634340330919 -0.027261494605161095545 -0.0065266051800720557841 0.012413369131181781202 -0.026514990802825044725 -0.017882338891951378435 -0.0029959419813249425421 -0.015475441824144991337 -0.039794340344102188678 0.036657577851043190997 -0.020009989898258379731 -0.003045465037190389461 0.016585366176425361123 0.050775807434571350318 0.011756959436382850848 -0.036213096466444875954 -0.01672536255545839165 0.0019344876296682551788 -0.026189018936113910019 -0.0052094236498148923514 -0.02279285156174932353 -0.027305750293409907642 0.017899993600116355374 0.018687896641467253295 -0.01569688311969393707 0.00061627290681161772321 0.045557255006347802118 -0.022525195759094784886 0.027593988252276345496 -0.018295020262721135157 0.04674506898346003636 0.056782458328738877329 -0.009395589349659658196 0.0012998482790676792707 -0.020810598307827138376 -0.026845055541726899062 -0.023472384731720273565 -0.02756956466895485805 0.15284982816248682269 0.15618498403943645303 0.40524086873972375855 0.3797711346796905918 0.39414782914637891409 0.36171666856457701522 0.42318530250599367681 0.19473050086068999232 -0.16500916725593103851 0.073409614851920226841 0.0030199075046798227323 0.030550237260379441151 0.044094474490313506632 0.056895868728391946201 0.066622192971049487564 0.089942853759413202153 -0.018040552299147367965;0.021113987958501185399 -0.031044079153649862396 0.061585471849493818308 0.060119405093869066059 0.012021828860478960682 -0.041743753303081859718 -0.041645871816370236274 -0.029038731540742032666 -0.018011214582638865322 -0.020279217403642867817 0.091586951181952563905 0.036678145155612011663 -0.0012416340020959151617 -0.024448746664300115283 0.010251908251792693147 -0.060142799100278046542 -0.023397324029032794124 -0.046994998453908094771 -0.0016535070767264227649 0.043181677587960161369 0.053043037111344629175 -0.0010194268705823001861 0.047373139595228506982 0.006509049478774453501 0.0091059603297951076384 0.023682048958990412069 -0.01549941725168154337 -0.013878982248888662929 0.03622533973051047379 -0.017450345062416449532 0.029174330063755332665 -0.031572880377706565025 0.0079024552462182966889 0.0034693286788453872767 0.016428843920674205542 -0.044356063657490875374 0.0086573844453152401512 0.037232539586934877696 -0.031884229214926639029 0.010220047513641937476 0.017505082804640331728 -0.020444535639360893881 -0.031799978846013723932 0.0087142327567142092298 -0.016716389647237761551 -0.042051565481621699938 0.04017580616083796935 -0.021581264674276755267 0.0088078379442719269277 0.03100007315380075637 0.055743452316719156736 0.020049912123358559074 -0.056033881297307734648 -0.013328899020697906885 -0.006663763264964428501 -0.030534178501242879161 -0.0045516044039838159108 -0.014559135051604821937 -0.030063776107309467256 0.027567095030953718549 0.033484869028211426689 -0.017111862957671874347 0.011526623217405634891 0.043071051504108746888 -0.022805596093476768887 0.04201065975133422975 -0.0036473241184784878366 0.055131620491872694589 0.066499051391677554967 -0.0033785776285375321466 0.00021159870896034330178 -0.022401012231677522313 -0.042284670207844939072 -0.016535712674431601865 -0.016537302103398692638 0.15337378762514780606 0.1672941098294219997 0.45542904479996609846 0.42112911278516251823 0.4487214937415610061 0.39676958739218665118 0.47260989397587643834 0.21748269401191386296 -0.18429170666665334322 0.084643325688765203019 -0.0081393965157539761163 0.036729045308931854152 0.0470948997608800074 0.070745556589881963827 0.071484666574582161891 0.10828442941696855839 -0.011842536524265288161];
  
  % Layer 2
  b2 = -1.1476244196542020326;
  LW2_1 = [-2.4691312095028288276 -3.5534870496097115122];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 2;
  y1_step1_xoffset = 0;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1_keep,x1_step1_remove);
    Xp1 = mapminmax_apply(temp,x1_step2_gain,x1_step2_xoffset,x1_step2_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings_keep,settings_remove)
  if isempty(settings_remove)
    y = x;
  else
    y = x(settings_keep,:);
  end
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
