function [Y,Xf,Af] = testLinkerClassifierANN(X,~,~)
%TESTLINKERCLASSIFIERANN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Jul-2014 18:41:20.
% 
% [Y] = testLinkerClassifierANN(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [46;41;0;0;-12.3333330154419;-9.77777767181396;-8.08301544189453;-7.72759056091309];
  x1_step1_gain = [0.0111111111111111;0.0109289617486339;2;2;0.0796460190434754;0.119205298766113;0.109287195835443;0.144580290122724];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.0961971263443728297;-3.3267370978689543293];
  IW1_1 = [-4.7137650913211981418 4.4817965830439572272 -0.011026606745715501062 -0.11054097853758593217 -0.85538852144857691062 -1.5815620731939297183 0.96497761129476933295 -1.7332355016002807258;-5.1916625165467884528 1.4277470007108734595 -0.11690896714061931039 -0.1621843334591744068 2.3811518295282620983 -0.76563194098382025832 0.76200780178956029065 2.0970399075582393245];
  
  % Layer 2
  b2 = -6.9333752300864297524;
  LW2_1 = [7.1341433255521486956 -6.8588750071280522036];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 2;
  y1_step1_xoffset = 0;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
