function [Y,Xf,Af] = matcherClassifier(X,~,~)
%MATCHERCLASSIFIER neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 04-Jul-2014 16:23:37.
% 
% [Y] = matcherClassifier(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 102xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_remove = [2 14 15 16 22 23 24 30 31 32 33 38 43 48 53 58 73 78 83 88 100];
  x1_step1_keep = [1 3 4 5 6 7 8 9 10 11 12 13 17 18 19 20 21 25 26 27 28 29 34 35 36 37 39 40 41 42 44 45 46 47 49 50 51 52 54 55 56 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72 74 75 76 77 79 80 81 82 84 85 86 87 89 90 91 92 93 94 95 96 97 98 99 101 102];
  x1_step2_xoffset = [0;0;0;0;0;0;0;0;0;0;0;0;0.00127975103649323;0.000469404902854964;0;0;0;0;8.41405337266288e-05;0;0;0;0;0;0.000706850513312901;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.000728528943473028;0;0;0;0.000844584218117228;0;0;0;0;2.77555756156289e-17;0;0;0;0;2.77555756156289e-17;0;0;0;0;0;0;0;0;0;0;0;1.11022302462516e-16;0;0;0;5.55111512312578e-17;0;0;0;0;0;0;0;0;0;0];
  x1_step2_gain = [0.02;2.90652529205517;2.06438546710481;2.23946220602676;2.37539523637238;2.73997426714905;4.0920277807005;5.7557715599214;8.92691159878492;21.2014150471142;21.3158942326794;149.211259628756;2.62104820982207;3.57516869660522;3.04179638577687;20.0758561461274;110.326787318402;2.37832058444623;2.62965928182549;2.14761135008694;8.15287604193158;100.697567001393;13.8082101181387;6.90410505906933;5.68787316202093;5.04023175880922;8.95823643358446;6.58280588604383;5.54777232569775;6.26276474268531;12.4365054041184;7.51664818918646;5.34258456896503;6.89347517584563;10.4642247682282;6.5;5.67646212197547;7.44983221287567;14.7648230602334;7.50044962753321;4.73757464964042;6.65732679083729;16.0277537068951;7.02376916856849;5.52648714142548;4.58257569495584;43.3589667773576;13.8082101181387;7.45117440407886;5.67097875150313;5.25991127935317;43.3589667773576;12.0208152801713;7.88986691902975;6.11010092660779;7.03562363973514;10.8397416943394;7.21110255092798;5.93158271200763;9.91071249821234;12.4365054041184;6.65732679083729;5.25873758497744;6.19677335393187;12.3648246606609;6.05530070819498;5.94418483337567;6.89202437604511;11.4891252930761;6.21825270205921;5.74456264653803;4.94973674286517;2;2;2;2;2;2;2;0.00595238095238095;0.00909090909090909];
  x1_step2_ymin = -1;
  
  % Layer 1
  b1 = [0.48563823496721303385;0.071778227218246185015];
  IW1_1 = [-0.22942969586739939136 -0.28613047860252904808 0.18908407701757146135 0.23214705836325663646 0.028234591021355160551 0.41898711293224866203 0.20175878936475094561 0.029902462384849799043 -0.062370051910201659839 -0.044557882126225911712 -0.12455676213840835564 0.084009768379060822951 0.045319564510532123203 0.20759517297271404268 -0.0092929929911929366748 -0.35776922933124166715 -0.064865236771461012855 0.28039846856917860496 -0.095407609861741626833 -0.12757357081884973526 -0.19578502507118525355 0.048715626553760146833 -0.26542339105015022582 0.20123311687079079024 0.12901928439430326856 -0.25769473278905002944 0.14078575433559167851 0.098334610582868964279 -0.13829983369821702288 -0.077860473991771678159 0.080092892880181357218 -0.19486596015812401861 -0.079070548027543791081 -0.18735897674203735863 -0.019727303982398233795 -0.049013299888167431717 -0.037712458070177229397 -0.11538172817341267595 -0.18839446711303742266 0.092434236330363350742 0.17015160906937235041 -0.1587212509303713992 -0.025917260418803909211 0.1619492562661777324 -0.069154904309915304905 -0.15112117400818522728 -0.33160784888470329346 0.50148151254004502686 -0.11592890404930500381 0.06767975588461407066 -0.015745585512161652808 -0.19519500332988307112 0.0051463676331400566577 0.048076963892104536413 -0.11186877402346503962 0.026733509904241430782 -0.021177363773718337059 0.023705275537805728381 -0.027717310180176580464 -0.19641526740684969732 0.059123706138017026457 -0.00697617019343334515 0.20041721588859842673 -0.13445408149671353448 0.0063002287608978010947 -0.15400623059427787087 -0.1644482175895233822 -0.15926927022747147666 -0.47353108590857045934 -0.013907692253594198736 -0.018701201125645616069 -0.088467084419978109233 -0.076666520651214653537 -0.075896310900646121733 0.072403590349136556781 -0.059407879552066944484 -0.087233312673086552125 0.063627742025914896251 -0.0072322841907603565778 1.2272592767914731748 1.67536278266815164;-0.027280929369093216696 -0.055486712529566141472 -0.015772736999379467077 0.0036242091299469249462 -0.022175260204423778709 -0.0071156139728978063871 -0.015516640254827481979 -0.034087654471714572135 -0.04259410599818553439 -0.044384225566316333478 -0.053918281233938832042 -0.041769760396551072756 -0.013800002983018408442 -0.017307044202485542816 -0.024307579841657309117 -0.053889630038320965322 -0.061949408528564467447 -0.012863301218630040015 -0.025119578113373286499 -0.014477530423075667121 -0.048896416541281663426 -0.040845355754327565545 -0.061646916858884827362 -0.021333175126567710533 -0.028350584337974146787 -0.031338572392316021986 -0.040218014086271812457 -0.016001182543194714114 -0.030006915226624818194 -0.037506429044401372319 -0.023120678438416659289 -0.027892460724014744855 -0.039214737005176442119 -0.055328298844111313548 -0.030252541881708051169 -0.032154001746304075593 -0.02897892016744443508 -0.048910345320329291774 -0.038360001469724028245 -0.0097180102540830003155 -0.02373138363792264699 -0.037444688373094600631 -0.065783279109839637444 -0.021320889518697736659 -0.031188180620818652805 -0.020251158324735923921 -0.071714066230049139383 -0.041971563444251867858 -0.02729683071537615871 -0.028881607154305717622 -0.028595135540868395901 -0.057427334778256441949 -0.052315328786551797136 -0.0089488058314227490048 -0.02015910519584562105 -0.023680245403669659271 -0.021744015185296748649 -0.0096510772254822033145 -0.027657225204852413369 -0.052196558638469156555 -0.036679966472608425965 -0.021036073094274351097 -0.021629541796760687333 -0.048797231721608991251 -0.045719573492289451722 -0.025073660525489163686 -0.032240787769572988586 -0.033741115024862981808 -0.063798428453025218809 -0.029621411763743544371 -0.028089011384519999709 -0.029702195688841404736 -0.038307157748910608541 -0.0287262024608945718 -0.038855912481469842557 -0.064410944543902504122 -0.063507950719797048866 -0.033054994397316753152 -0.032712195966197864239 0.0060156479354664125006 0.013179324428265094468];
  
  % Layer 2
  b2 = -0.5595906162920303295;
  LW2_1 = [-3.3525905415724519543 -0.57681474793145903757];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 2;
  y1_step1_xoffset = 0;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1_keep,x1_step1_remove);
    Xp1 = mapminmax_apply(temp,x1_step2_gain,x1_step2_xoffset,x1_step2_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings_keep,settings_remove)
  if isempty(settings_remove)
    y = x;
  else
    y = x(settings_keep,:);
  end
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
