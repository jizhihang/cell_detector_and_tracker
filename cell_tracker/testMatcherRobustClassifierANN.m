function [Y,Xf,Af] = testMatcherRobustClassifierANN(X,~,~)
%TESTMATCHERROBUSTCLASSIFIERANN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Jul-2014 11:45:37.
% 
% [Y] = testMatcherRobustClassifierANN(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 102xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_remove = [2 14 15 16 22 23 24 30 31 32 33 38 43 48 53 58 73 78 83 88 100];
  x1_step1_keep = [1 3 4 5 6 7 8 9 10 11 12 13 17 18 19 20 21 25 26 27 28 29 34 35 36 37 39 40 41 42 44 45 46 47 49 50 51 52 54 55 56 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72 74 75 76 77 79 80 81 82 84 85 86 87 89 90 91 92 93 94 95 96 97 98 99 101 102];
  x1_step2_xoffset = [0;0;0;0;0;0;0;0;0;0;0;0;0.00127975103649323;0.000469404902854964;0;0;0;0;8.41405337266288e-05;0;0;0;0;0;0.000706850513312901;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.000728528943473028;0;0;0;0.000844584218117228;0;0;0;0;2.77555756156289e-17;0;0;0;0;2.77555756156289e-17;0;0;0;0;0;0;0;0;0;0;0;1.11022302462516e-16;0;0;0;5.55111512312578e-17;0;0;0;0;0;0;0;0;0;0];
  x1_step2_gain = [0.02;2.90652529205517;2.06438546710481;2.23946220602676;2.37539523637238;2.73997426714905;4.0920277807005;5.7557715599214;8.92691159878492;21.2014150471142;21.3158942326794;149.211259628756;2.62104820982207;3.57516869660522;3.04179638577687;20.0758561461274;110.326787318402;2.37832058444623;2.62965928182549;2.14761135008694;8.15287604193158;100.697567001393;13.8082101181387;6.90410505906933;5.68787316202093;5.04023175880922;8.95823643358446;6.58280588604383;5.54777232569775;6.26276474268531;12.4365054041184;7.51664818918646;5.34258456896503;6.89347517584563;10.4642247682282;6.5;5.67646212197547;7.44983221287567;14.7648230602334;7.50044962753321;4.73757464964042;6.65732679083729;16.0277537068951;7.02376916856849;5.52648714142548;4.58257569495584;43.3589667773576;13.8082101181387;7.45117440407886;5.67097875150313;5.25991127935317;43.3589667773576;12.0208152801713;7.88986691902975;6.11010092660779;7.03562363973514;10.8397416943394;7.21110255092798;5.93158271200763;9.91071249821234;12.4365054041184;6.65732679083729;5.25873758497744;6.19677335393187;12.3648246606609;6.05530070819498;5.94418483337567;6.89202437604511;11.4891252930761;6.21825270205921;5.74456264653803;4.94973674286517;2;2;2;2;2;2;2;0.00595238095238095;0.00909090909090909];
  x1_step2_ymin = -1;
  
  % Layer 1
  b1 = [-0.44689954234922762977;0.093048045186620159663];
  IW1_1 = [0.17751774785009405422 0.28363455136082055263 -0.16884253353504147244 -0.24637816340663382109 -0.055964019093879033284 -0.37269736536792069659 -0.14772735866273128957 -0.034244176279661399376 0.063845969565868965212 0.034092564939967262561 0.14357919203538657693 -0.066016344717559863331 -0.077489558319900550543 -0.2252274390493180789 0.030740622515416406169 0.31703342758927050005 0.077029302264026988656 -0.21412000383669602122 0.065082171800689314622 0.055979156720480129084 0.18830924212789987293 -0.052675095130901433693 0.20173562045696116773 -0.11926639485653607597 -0.057227991697636364232 0.17158327629028816141 -0.047692143755639987424 -0.052485031910503660013 0.15545904820859107742 0.095856943729266910759 -0.12064548793928502046 0.10420969043022260125 0.096115025268884310417 0.21785569951199398875 0.091474972725475042767 0.010763283061516491779 0.029722942073826408987 0.081988621242608236694 0.17367923647632702022 -0.078374861555507699395 -0.052602807506088110345 0.14707485227031677488 0.022523118560224261037 -0.17093537427639082793 0.08901717531887957946 0.18474491063936177015 0.28576453550602115561 -0.40010375777147455523 0.079253384737737048171 -0.06102201509812485436 -0.020932730601437497114 0.14896446445068131648 0.019797255063101485556 -0.040843620068393676759 0.072639672387952033961 0.013464421939177779672 0.050673446012579156927 0.013606791951216119785 -0.049115757601826168233 0.15918949305508819925 -0.033895710943475154675 -0.0066721913929328182866 -0.20179419349988086951 0.12312857183795167249 0.051804115551729368327 0.086223428025436213429 0.1177670674567500575 0.091317619699463933869 0.35396634922752490127 0.042502814710482672567 0.019818510503106109844 0.040096745925364225827 0.086482043676109163211 0.047051357761269181623 -0.072346819005644213973 0.0036179933973821049899 0.10131667281043803264 -0.068423913504933847607 0.042580279125804545992 -1.2134439262536063087 -1.5640874378416189661;-0.02806370572053198606 -0.054311499426189902007 0.091672778924108563881 0.079878182273717748818 0.054277454558642718174 0.097721480217272879698 0.045332331506328094051 -0.0012963473351928914493 -0.020917011643247808428 -0.016536586205069470773 -0.040525906724675209158 0.0059359224849163333762 0.064384601618007880619 0.055063547705548589184 0.0082106247051176063645 -0.0756504030772605085 -0.043835886887558087044 0.067478450261063568916 -0.0088140678367624632206 0.024285086684722973632 -0.050721791347518696558 -0.021653871360507347815 -0.050579983749483636846 -0.0039326894111659203845 -0.01703351482461570518 -0.052252907392074707249 0.0063479990957719849634 -0.0074203128865691645247 -0.022473070797655956415 -0.055245258347790759945 0.042367669611718943024 -0.029190720649771451783 -0.0235154729950132306 -0.076865497294033732767 -0.0079537204330975760924 -0.026976797059376514398 -0.0025235542594684899978 -0.051580685368327751361 -0.032493201139431590607 0.017551993783412874611 0.012451780400503230373 -0.040462693797327850542 -0.036855336332254601261 0.03674072084700535229 -0.027302108588167336295 -0.026868408022065502078 -0.065265031744377463574 0.048583636985359855698 -0.017940530069523563661 -0.013049533993182453259 -0.00020108861347916675514 -0.038257353394173548855 -0.023226804857576815316 0.0064826761449564241843 -0.010047963759802668732 -0.0065830790212143761031 0.0072185481945668088233 0.0019265766947700391828 0.013249797465411097472 -0.076754743211300768824 -0.012601682076046404751 -0.0058977804388074548184 0.029901875215002600428 -0.037776715056520797364 -0.022161209387435210072 -0.033138788340409619515 -0.037164134409400147174 -0.047010210716855606317 -0.04997128077572601107 -0.0098528263170971231572 -0.026497971966276824551 -0.0091559689615055266793 -0.066396991506474475897 -0.02862536675573178549 -0.014504424397939762875 -0.029950744568814399726 -0.04996625002851529801 0.033574350999483845714 -0.0027454548178458713578 0.28172962518044764035 0.30022138853793534086];
  
  % Layer 2
  b2 = -0.79164469766618605906;
  LW2_1 = [3.0584750600084795735 -0.68973594047281294728];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 2;
  y1_step1_xoffset = 0;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1_keep,x1_step1_remove);
    Xp1 = mapminmax_apply(temp,x1_step2_gain,x1_step2_xoffset,x1_step2_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings_keep,settings_remove)
  if isempty(settings_remove)
    y = x;
  else
    y = x(settings_keep,:);
  end
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
