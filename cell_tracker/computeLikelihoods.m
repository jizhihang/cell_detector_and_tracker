function Liks = computeLikelihoods(tracklets, descriptors, hypothesis, hypTypes, options)
	% COMPUTELIKELIHOODS Computes the likelihood of each hypothesis
	% Inputs:
	% 	tracklets = the tracklets matrix generated by generateTracklets()
	% 	descriptors = descriptors of head and tail of each trackles as computed by getTrackletHeadTailDescriptors()
	% 	hypothesis = the hypothesis matrix generate by generateHypothesisMatrix()
	%	hypTypes = a vector indicating the type of hypothesis, as generateb by generateHypothesisMatrix()
	% 	options = a struct with options
	% Outputs:
	% 	Liks = a column vector of length numHypothesis containing likelihoods for each hypothesis

	% TODO: remove this:
	% To compute the probablities I will need:
	% 	- to compute Pfp and Ptp I will need:
	% 		- MISS DETECTION rate of cell_detector
	% 		- number of cells in tracklet
	% 	- to compute the Plink I will need:
	% 		A FEATURE VECTOR of first and last tracklet in sequence (CELL DESCRIPTOR)
	% 		including motion feature and distance to following tracklet
	% 		check that the spatial distribution of cells in tracklets is similar
	% 	- to compute init prob I will need
	% 		temporal and spatial distribution of tracks before it,
	% 		and its proximity to a boundary  (IMAGE SIZE)
	% 	- to compute term prob I will need
	% 		temporal and spatial distribution of tracks after it,
	% 		and its proximity to a boundary

	%------------------------------------------------------------------Options
	if nargin < 2; options = struct; end

	% This should mirror the types in generateHypothesisMatrix()
	TYPE_INIT = 1;
	TYPE_TERM = 2;
	TYPE_FP = 3;
	TYPE_LINK = 4;

	MISS_DETECTION_RATE = 0.3;  % TODO: load real value from an external param
	% file

	%--------------------------------------------------------Preallocate space
	numHypothesis = size(hypothesis, 1);
	numTracklets = size(tracklets, 1);

	% Likelihood vector
	Liks = zeros(numHypothesis, 1);

	%-------------------------------------------------Precompute probabilities

	linkHypothesisIdx = find(hypTypes == TYPE_LINK);
	linkHypothesis = hypothesis(linkHypothesisIdx, :);
	pLinks = computePlink(linkHypothesis);
	[pFPs, pTPs] = computeTruthnessProbs(1:numTracklets);

	%------------------------------------------------------Compute likelihoods

	% Although generateHypothesisMatrix orders the hypothesis is an easy to remember order, I do not rely on the order, but on the types given in hypTypes

	% Compute initialization hypothesis
	Liks(hypTypes == TYPE_INIT) = 0.1;

	% Compute termination hypothesis
	Liks(hypTypes == TYPE_TERM) = 0.2;

	% Compute false positive hypothesis
	[I, ~] = find(hypothesis(hypTypes == TYPE_FP, 1:numTracklets));
	Liks(hypTypes == TYPE_FP) = pFPs(I);

	% Compute link hypothesis
	for i=1:numel(linkHypothesisIdx)
		[~, J] = find(linkHypothesis(i, :));
		Liks(linkHypothesisIdx(i)) = pLinks(J(1), J(2)-numTracklets);
	end

	function P = computePlink(linkHypothesis)
		% COMPUTEPLINK for each link hypothesis compute the probability of linking
		% Inputs:
		% 	linkHypothesis= a (sparse) matrix of dimensions numTracklets x numTracklets containing 1 if the tracks could potentially be linked
		% Outputs:
		% 	P = the probability of linking the pairs of tracklets as evaluated by a learned model, in the form a of matrix the same size as linkHypothesis;

		% Algorithm outline:
		% create a matrix of descriptor pairs for each possible tracklet connection
		% TODO: augement the cell descriptor with motion features
		% create a sparse matrix like linkHypothesis
		% for each possible link hypothesis evaluate the model

		%----------------------------------------------------Preallocate space
		numLinkHypothesis = size(linkHypothesis, 1);
		numFeatures = size(descriptors, 2);
		trackletPairs = zeros(numLinkHypothesis, 2);
		descriptorDistMatrix = zeros(numLinkHypothesis, numFeatures);
		P = sparse([],[],[], numTracklets, numTracklets);
		% descriptors contains descriptors of the head and tail of each tracklet
		% descriptorPairs contains pairs of augemented descriptors of possibly intenracting tracklets, use to compute the link probabilities.
		descriptorPairs = zeros(numLinkHypothesis, numFeatures, 2);
		descriptorPairDffs = zeros(numLinkHypothesis, numFeatures);
		%---------------------------------------Get tracklet pairs descriptors

		for i=1:numLinkHypothesis
			[~, J] = find(linkHypothesis(i, :));
			trackletPairs(i, :) = [J(1) J(2)-numTracklets];
		end

		% For each link hypothesis place into descriptorPair the tail of
		% the previous and head of next tracklet
		TAIL_POS = 2;
		HEAD_POS = 1;
		for i=1:numLinkHypothesis
			desA = descriptors(trackletPairs(i, 1), :, TAIL_POS); % tail of prev
			desB = descriptors(trackletPairs(i, 2), :, HEAD_POS); % head of next

			descriptorPairs(i, :, 1) = desA;
			descriptorPairs(i, :, 2) = desB;
		end

		% TODO augment descriptorPairs with motion history

		%---------------------------------------------------Evaluate the Plink

		for i=1:numLinkHypothesis
			trackletA = trackletPairs(i, 1);
			trackletB = trackletPairs(i, 2);

			D = euclideanDistance(descriptorPairs(trackletA, :, 1), ...
								  descriptorPairs(trackletB, :, 2));
			descriptorPairDffs(i, :) = D;
		end

		matchP = testMatcherTrackletJoinerNB(descriptorPairDffs);
		for i=1:numLinkHypothesis
			P(trackletPairs(i, 1), trackletPairs(i, 2)) = matchP(i);
		end
	end

	function [FP, TP] = computeTruthnessProbs(trackletIdx)
		% COMPUTETRUTHNESSPROBS Computes the probability that a tracklet is a false positive or a true positive
		% Inputs:
		% 	trackletIdx = indices of tracklets
		% Outputs:
		% 	FP = corresponding false positive probability
		% 	TP = corresponding true positive probability
		
		len = sum(max(tracklets(trackletIdx, :, :), [], 3) ~= 0, 2);
		FP = MISS_DETECTION_RATE .^ len;
		TP = 1 - FP;
	end
end