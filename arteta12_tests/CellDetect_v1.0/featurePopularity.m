function feats = featurePopularity( outFolder, featureNames )
%FEATUREPOPULARIY Returns a popularity score of features indicating how
%often they were performed effectively
% Three scrores are returnsed: recallScore, precisionScore and timeScore
% for each feature.
% Inputs:
%     - outFolder: the folder containing
% 		- a file named `batchResults.mat` containg the results matrix generated by featureSelection.m file
% 		- mat files including the location of the detected cells
%     - [featureNames]: a cell array of feature names, in the same order are
%         the columns in resultsFile.
% Output:
%     - a table containing structs with each feature names and its scores
%         the table is sorted in descending order by totalScore
% Examples:
%     - featurePopularity('kidney/outKidneyGreen');
%     - featurePopularity('kidney/outKidneyGreen', {'area'...
%                   'intensityHistogram' 'position' 'differenceHistogram'...
%                   'shape''orientation' 'edges'});
% Example output:
%                            timeScore    recallScore    precisionScore    totalScore    rank
%                            _________    ___________    ______________    __________    ____
% 
%     area                   0.73429      0.89937        0.80614           -0.63041      4   
%     intensityHistogram     0.75222       0.8858        0.85101           -0.56732      1   
%     position               0.76763      0.85496        0.81533           -0.62531      3   
%     differenceHistogram    0.70252      0.92511        0.83672           -0.60919      2   
%     shape                  0.60282       0.8359        0.82427           -0.87864      7   
%     orientation            0.62874      0.83224        0.82566           -0.83924      6   
%     edges                  0.69272      0.84019        0.81526            -0.7455      5   
    
resultsFile = fullfile(outFolder, 'batchResults.mat');
load(resultsFile, 'results');
numImages = length(dir(fullfile(outFolder, 'im*.mat')));

% result fileds:
% 	- n-th: elapsed detection time for all images in the dataset
% 	- (n-1)-th: recall
% 	- (n-2)-th: precision
%   - 1:(n-3): feature vector
colTime           = size(results, 2);
colRecall         = size(results, 2) - 1;
colPrecision      = size(results, 2) - 2;
colsFeatureVector = 1:(size(results, 2) - 3);

if nargin < 2
   featureNames = cell(size(colsFeatureVector));
   for i=1:length(colsFeatureVector)
       featureNames{i} = num2str(i);
   end
end

% average time needed to detect cells in one image
results(:, colTime) = results(:, colTime) / numImages; 

tScores = zeros(length(colsFeatureVector), 1);
rScores = zeros(length(colsFeatureVector), 1);
pScores = zeros(length(colsFeatureVector), 1);
totScores = zeros(length(colsFeatureVector), 1);


for col=colsFeatureVector
    tVec = results(:,col) .* results(:, colTime);
    rVec = results(:,col) .* results(:, colRecall);
    pVec = results(:,col) .* results(:, colPrecision);
    tVec = tVec(~isnan(tVec) & tVec ~= 0);
    rVec = rVec(~isnan(rVec) & rVec ~= 0);
    pVec = pVec(~isnan(pVec) & pVec ~= 0);

    tScore = 1 / mean(tVec);
    rScore = mean(rVec);
    pScore = mean(pVec);
    totScore = log(rScore)+log(pScore) + log(tScore);
    
    tScores(col) = tScore;
    rScores(col) = rScore;
    pScores(col) = pScore;
    totScores(col) = totScore;
end

ranks = tiedrank(-totScores);


feats = table(tScores, rScores, pScores, totScores, ranks);
feats.Properties.VariableNames = {'timeScore' 'recallScore'...
                                  'precisionScore' 'totalScore', 'rank'};
feats.Properties.RowNames = featureNames;

